# Generated by Django 5.2.4 on 2025-08-11 11:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import nagoyameshi.models.restaurant_models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('slug', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('customer', models.TextField(blank=True, null=True, verbose_name='有料会員')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name_kana', models.CharField(blank=True, max_length=150, verbose_name='姓(カナ)')),
                ('first_name_kana', models.CharField(blank=True, max_length=150, verbose_name='名(カナ)')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('tel', models.CharField(blank=True, max_length=11, null=True, validators=[django.core.validators.RegexValidator(regex='^\\d{10,11}$')], verbose_name='電話番号')),
                ('gender', models.CharField(blank=True, choices=[('男性', '男性'), ('女性', '女性'), ('その他', 'その他')], max_length=3, null=True, verbose_name='性別')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生年月日')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.CharField(default=nagoyameshi.models.restaurant_models.create_id, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('price', models.CharField(blank=True, max_length=20)),
                ('post_code', models.CharField(blank=True, max_length=20)),
                ('start_time', models.CharField(blank=True, max_length=20)),
                ('end_time', models.CharField(blank=True, max_length=20)),
                ('closed_day', models.CharField(blank=True, max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, default='', upload_to=nagoyameshi.models.restaurant_models.upload_image_to)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='nagoyameshi.category')),
                ('tags', models.ManyToManyField(to='nagoyameshi.tag')),
            ],
        ),
    ]
